---
- name: install requirements
  hosts: 
  - workers
  - controller
  become: true
  tasks:
  - name: Install base packages
    ansible.builtin.apt:
        pkg:
            -  curl 
            - apt-transport-https
            - ca-certificates 
            - gnupg 
            - lsb-release
        update_cache: yes
        state: present
  - name: load kernel modules
    community.general.modprobe:
        name: "{{ item }}"
    loop:
        - overlay
        - br_netfilter
  - name: sysctl configuration
    ansible.posix.sysctl:
        name: "{{ item }}"
        value: 1
    loop:
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
        - net.ipv4.ip_forward
  - name: install containerd
    ansible.builtin.apt:
        name: containerd
  - name: create containerd directory
    ansible.builtin.file:
        path: /etc/containerd
        state: directory
  - name: containerd configuration
    ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
    args:
        creates: /etc/containerd/config.toml
  - name: restart containerd service
    ansible.builtin.systemd:
        name: containerd
        state: restarted

- name: Install Kubernetes
  hosts:
      - controller
      - workers
  become: true
  vars:
      kubernetes_version: 1.24.0-00
  tasks:
  - name: Add an Apt signing key
    ansible.builtin.apt_key:
     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
     state: present

  - name: Add specified repository into sources list
    ansible.builtin.apt_repository:
     repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
     state: present
  - name: Install Kubernetes
    ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg: 
            - kubelet={{ kubernetes_version }}
            - kubeadm={{ kubernetes_version }}
            - kubectl={{ kubernetes_version }}

- name: Initialize cluster
  hosts: controller
  become: true
  vars:
    pod_cidr: "192.168.0.0/16"
    cni_plugin: "weave" # "my"  or "weave"

  tasks:
  - name: Init cluster
    ansible.builtin.shell: 
    args:
       cmd: kubeadm init --pod-network-cidr={{ pod_cidr }} --kubernetes-version=1.24.0
       creates: /etc/kubernetes/manifests/kube-apiserver.yaml

  - name: Create .kube directory
    become: true
    become_user: "{{ ansible_user }}"
    ansible.builtin.file:
        path: $HOME/.kube
        state: directory
        mode: 0755

  - name: Copy kubeconfig
    ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: true
        owner: "{{ ansible_user  }}"

  - name: Render weavenet YAML
    ansible.builtin.template:
        src: weavenet.yaml
        dest: /tmp/weavenet.yaml

  - name: CNI plugin
    ansible.builtin.include_tasks:
        file: my-cni-tasks.yaml
    when: cni_plugin == "my"

  - name: Install pod network
    become: true
    become_user: '{{ ansible_user }}'
    ansible.builtin.shell: kubectl apply -f /tmp/weavenet.yaml
    when: cni_plugin == "weave"

  - name: Get the token for joining the worker nodes
    become: true
    become_user: '{{ ansible_user }}'
    ansible.builtin.shell: kubeadm token create  --print-join-command
    register: join_command

- name: Join worker nodes
  hosts: workers
  become: true
  tasks:
      #  - name: print_cmd
      #    ansible.builtin.debug: 
      #      msg: "{{ hostvars['controller']['join_command'] }}"
  - name: Join nodes
    ansible.builtin.shell: 
    args:
        cmd: "{{ hostvars['my_controller']['join_command'].stdout_lines[0] }}" 
        creates: /etc/kubernetes/kubelet.conf
